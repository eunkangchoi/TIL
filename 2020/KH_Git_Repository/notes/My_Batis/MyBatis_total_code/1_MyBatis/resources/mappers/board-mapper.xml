<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="boardMapper">
	<!--  숫자값만 반환하면된다. 즉  -->
  <select id="selectListCount" resultType="_int">
  	SELECT COUNT(*)
  	FROM BOARD
  	WHERE B_STATUS='Y'
  </select>
  
  <select id="selectBoardList"  resultMap="boardResultSet">
  	SELECT *
  	FROM BOARD
    	JOIN MEMBER ON(BWRITER=USER_ID)
	WHERE B_STATUS='Y'
	ORDER BY BID DESC
  </select>
  
  <!--
  [BOARD테이블의 컬럼과 Board객체의 필드를 맞춘다.]
  	1. board-mapper.xml에서 resultMap을 만든다.
  	2. myBatis-config.xml에서 typeAlias를 만든다=> 즉 resultMap의 타입을 alias로 별칭(Board)으로하겠다는 뜻.
  		(실제: board.model.vo.Board, alias: Board)
  	3. 테이블의 컬럼과 필드를 연결한다.
   -->
  <resultMap type="Board" id="boardResultSet">
  	<id property="bId" column="BID"/>
  	<result property="bType" column="BTYPE"/>
  	<result property="bTitle" column="BTITLE"/>
  	<result property="bContent" column="BCONTENT"/>
  	<result property="bWriter" column="BWRITER"/>
  	<result property="nickName" column="NICKNAME"/>
  	<result property="bCount" column="BCOUNT"/>
  	<result property="bCreateDate" column="B_CREATE_DATE"/>
  	<result property="bModifyDate" column="B_MODIFY_DATE"/>
  	<result property="bStatus" column="B_STATUS"/>
  	
  </resultMap>
  
  <update id="updateCount" parameterType="_int" >
  	update board
  	set bcount= bcount +1
  	where bId=#{bId}
  </update>
  
  <select id="selectBoardDetail" parameterType="_int" resultMap="boardResultSet2">
  	SELECT BID, BTYPE, BTITLE, BCONTENT, BWRITER, M1.NICKNAME AS B_NICKNAME, 
	    BCOUNT, B_CREATE_DATE, B_MODIFY_DATE, B_STATUS, 
	    RID, RCONTENT, REF_BID, M2.NICKNAME AS R_NICKNAME,
	    R_CREATE_DATE, R_MODIFY_DATE, R_STATUS
	FROM BOARD
	    JOIN MEMBER M1 ON(BWRITER=M1.USER_ID)
	    LEFT JOIN REPLY ON(BID=REF_BID)
	    LEFT JOIN MEMBER M2 ON(RWRITER=M2.USER_ID)
	WHERE B_STATUS='Y'
			AND BID=#{bId}
	ORDER BY RID DESC
  </select>
  <resultMap type="Board" id="boardResultSet2">
  	<id property="bId" column="BID"/>
  	<result property="bType" column="BTYPE"/>
  	<result property="bTitle" column="BTITLE"/>
  	<result property="bContent" column="BCONTENT"/>
  	<result property="bWriter" column="BWRITER"/>
  	
  	<result property="nickName" column="B_NICKNAME"/>
  	
  	<result property="bCount" column="BCOUNT"/>
  	<result property="bCreateDate" column="B_CREATE_DATE"/>
  	<result property="bModifyDate" column="B_MODIFY_DATE"/>
  	<result property="bStatus" column="B_STATUS"/>
  	
  	<!-- 
  	1. REPLY는 여러개를 담을 수있다 => collection
  	2. replyList 필드가 있다. 이는 ArrayList타입으로 되어있다.
  	3. javaType설정: 내가 보내는 것은 ArrayList이다. 그러므로 collection으로 한다.
  	4. ArrayList안에 Reply가 있으니까. 얘네들을 기준으로 매칭시켜서 갖고와라
  	-->
  	<collection property="replyList" javaType="java.util.ArrayList" resultMap="ReplyResultSet"></collection>
  </resultMap>
  
  <!-- Reply에대한 resultMap -->
  <resultMap type="Reply" id="ReplyResultSet">
  	<id property="rId" column="RID"></id>
  	<result property="rContent" column="RCONTENT"></result>
  	<result property="refBid" column="REF_BID"></result>
  	<result property="nickName" column="R_NICKNAME"></result>
  	<result property="rCreateDate" column="R_CREATE_DATE"></result>
  	<result property="rModifyDate" column="R_MODIFY_DATE"></result>
	<result property="rStatus" column="R_STATUS"></result>
  </resultMap>
  
  
  
  <!-- selectSearchResultCount -->
  <select id="selectSearchResultCount" parameterType="SearchCondition" resultType="_int">
  	SELECT COUNT(*)
  	FROM BOARD
  		JOIN MEMBER ON(BWRITER=USER_ID)
  	WHERE B_STATUS='Y'
  	
  	<if test="writer != null">
  		AND NICKNAME=#{writer}
  	</if>
  	
  	<if test="title != null">
  		AND BTITLE LIKE '%' || #{title} || '%'
  	</if>
  	
  	<if test="content !=null">
  		AND BCONTENT LIKE '%' || #{content} || '%'
  	</if>
  </select>
  
  <select id="selectSearchResultList" parameterType="SearchCondition" resultMap="boardResultSet">
  	SELECT *
  	FROM BOARD
  		JOIN MEMBER ON (BWRITER=USER_ID)
  	WHERE B_STATUS='Y'
  	<choose>
  		<when test="writer != null">
  			AND NICKNAME= #{writer}
  		</when>
  		
  		<when test="title != null">
  			AND BTITLE LIKE '%' || #{title} || '%'
  		</when>
  		
  		<otherwise>
  			AND BCONTENT LIKE '%' || #{content} || '%'
  		</otherwise>
  	</choose>
  	ORDER BY BID DESC
  </select>
</mapper>
